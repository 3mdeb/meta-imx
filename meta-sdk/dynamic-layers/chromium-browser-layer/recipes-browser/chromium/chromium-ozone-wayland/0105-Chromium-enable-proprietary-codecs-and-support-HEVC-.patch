From 266e9a03cfde94e2f4b96fd893ecb215e564aeba Mon Sep 17 00:00:00 2001
From: Qi Hou <nxf47649@lsv11151.swis.cn-sha01.nxp.com>
Date: Mon, 29 Nov 2021 13:32:59 +0800
Subject: [PATCH 1/3] Chromium: enable proprietary codecs and support HEVC VP9

The original assert is added by below commit to avoid video/mp4 playback
failure since it fails to fallback to video/webm even if supported by server.
https://chromium.googlesource.com/chromium/src/+/8f897728330ab4afe8c449001386756a9895bcf7%5E%21/#F0

Now vpu decoder is integrated to chromium, so it's safe to remove the assert.

Upstream-Status: Inappropriate [NXP specific]
---
 build/config/features.gni                  | 2 +-
 media/BUILD.gn                             | 6 ------
 media/base/supported_types.cc              | 7 +------
 media/media_options.gni                    | 8 ++------
 media/renderers/default_decoder_factory.cc | 8 ++++----
 5 files changed, 8 insertions(+), 23 deletions(-)

Index: chromium-101.0.4951.54/build/config/features.gni
===================================================================
--- chromium-101.0.4951.54.orig/build/config/features.gni
+++ chromium-101.0.4951.54/build/config/features.gni
@@ -23,7 +23,7 @@ declare_args() {
   #
   # Note: this flag is used by WebRTC which is DEPSed into Chrome. Moving it
   # out of //build will require using the build_overrides directory.
-  proprietary_codecs = is_chrome_branded || is_chromecast
+  proprietary_codecs = true
 
   # libudev usage. This currently only affects the content layer.
   use_udev = (is_linux || is_chromeos) && !is_chromecast
Index: chromium-101.0.4951.54/media/BUILD.gn
===================================================================
--- chromium-101.0.4951.54.orig/media/BUILD.gn
+++ chromium-101.0.4951.54/media/BUILD.gn
@@ -57,12 +57,6 @@ buildflag_header("media_buildflags") {
   ]
 }
 
-if (proprietary_codecs && media_use_ffmpeg) {
-  assert(
-      ffmpeg_branding != "Chromium",
-      "proprietary codecs and ffmpeg_branding set to Chromium are incompatible")
-}
-
 # Common configuration for targets in the media directory; these must not be
 # exported since things like USE_NEON and USE_CRAS have different meanings
 # elsewhere in the code base.
Index: chromium-101.0.4951.54/media/base/supported_types.cc
===================================================================
--- chromium-101.0.4951.54.orig/media/base/supported_types.cc
+++ chromium-101.0.4951.54/media/base/supported_types.cc
@@ -318,7 +318,7 @@ bool IsDefaultSupportedVideoType(const V
     case VideoCodec::kVP9:
       return IsVp9ProfileSupported(type);
     case VideoCodec::kHEVC:
-      return IsHevcProfileSupported(type);
+      return true;
     case VideoCodec::kMPEG4:
       return IsMPEG4Supported();
     case VideoCodec::kUnknown:
Index: chromium-101.0.4951.54/media/media_options.gni
===================================================================
--- chromium-101.0.4951.54.orig/media/media_options.gni
+++ chromium-101.0.4951.54/media/media_options.gni
@@ -90,16 +90,12 @@ declare_args() {
   # Enable HEVC/H265 demuxing. Actual decoding must be provided by the
   # platform. Enabled by default for Chromecast, fuzzer builds and protected
   # video on ChromeOS and Windows.
-  enable_platform_hevc =
-      proprietary_codecs &&
-      (is_chromecast || use_fuzzing_engine || enable_platform_encrypted_hevc)
+  enable_platform_hevc = true
 
   # Enable HEVC/H265 decoding with hardware acceleration assist. Enabled by
   # default for fuzzer builds and protected video on ChromeOS. It is also
   # enabled for Chromecast by default so the unit tests get run in Chrome CQ.
-  enable_platform_hevc_decoding =
-      proprietary_codecs &&
-      (is_chromecast || use_fuzzing_engine || use_chromeos_protected_media)
+  enable_platform_hevc_decoding = true
 }
 
 assert(
Index: chromium-101.0.4951.54/media/renderers/default_decoder_factory.cc
===================================================================
--- chromium-101.0.4951.54.orig/media/renderers/default_decoder_factory.cc
+++ chromium-101.0.4951.54/media/renderers/default_decoder_factory.cc
@@ -181,6 +181,10 @@ void DefaultDecoderFactory::CreateVideoD
   }
 #endif
 
+#if BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
+  video_decoders->push_back(std::make_unique<FFmpegVideoDecoder>(media_log));
+#endif
+
 #if BUILDFLAG(ENABLE_LIBVPX)
   video_decoders->push_back(std::make_unique<OffloadingVpxVideoDecoder>());
 #endif
@@ -197,10 +201,6 @@ void DefaultDecoderFactory::CreateVideoD
         std::make_unique<OffloadingDav1dVideoDecoder>(media_log));
 #endif
   }
-
-#if BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
-  video_decoders->push_back(std::make_unique<FFmpegVideoDecoder>(media_log));
-#endif
 }
 
 void DefaultDecoderFactory::Shutdown() {
